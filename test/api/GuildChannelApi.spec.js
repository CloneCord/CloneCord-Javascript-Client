/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloneCordApi);
  }
}(this, function(expect, CloneCordApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloneCordApi.GuildChannelApi();
  });

  describe('(package)', function() {
    describe('GuildChannelApi', function() {
      describe('createChannelUsingPOST', function() {
        it('should call createChannelUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for createChannelUsingPOST call and complete the assertions
          /*
          var channel = new CloneCordApi.FormChannel();
          channel.name = "";
          var guildId = "guildId_example";

          instance.createChannelUsingPOST(channel, guildId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloneCordApi.Channel);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteChannelUsingDELETE', function() {
        it('should call deleteChannelUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteChannelUsingDELETE call
          /*
          var channelId = "channelId_example";
          var guildId = "guildId_example";

          instance.deleteChannelUsingDELETE(channelId, guildId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateChannelUsingPUT', function() {
        it('should call updateChannelUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for updateChannelUsingPUT call and complete the assertions
          /*
          var channel = new CloneCordApi.FormChannel();
          channel.name = "";
          var channelId = "channelId_example";
          var guildId = "guildId_example";

          instance.updateChannelUsingPUT(channel, channelId, guildId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloneCordApi.Channel);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
