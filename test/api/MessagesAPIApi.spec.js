/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloneCordApi);
  }
}(this, function(expect, CloneCordApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloneCordApi.MessagesAPIApi();
  });

  describe('(package)', function() {
    describe('MessagesAPIApi', function() {
      describe('deleteMessageUsingDELETE', function() {
        it('should call deleteMessageUsingDELETE successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMessageUsingDELETE call
          /*
          var channelId = "channelId_example";
          var guildId = "guildId_example";
          var messageId = "messageId_example";

          instance.deleteMessageUsingDELETE(channelId, guildId, messageId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMessagesUsingGET', function() {
        it('should call getMessagesUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getMessagesUsingGET call and complete the assertions
          /*
          var channelId = "channelId_example";
          var guildId = "guildId_example";
          var opts = {};
          opts.after = 789;
          opts.before = 789;
          opts.limit = 100;

          instance.getMessagesUsingGET(channelId, guildId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(CloneCordApi.Message);
              expect(data.channelId).to.be.a('string');
              expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.message).to.be.a('string');
              expect(data.message).to.be("");
              {
                let dataCtr = data.reactionList;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(CloneCordApi.Reaction);
                  expect(data.authorUuid).to.be.a('string');
                  expect(data.authorUuid).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.emoteId).to.be.a('number');
                  expect(data.emoteId).to.be("0");
                }
              }
              expect(data.senderId).to.be.a('string');
              expect(data.senderId).to.be("""00000000-0000-0000-0000-000000000000");
              expect(data.sentDate).to.be.a(Date);
              expect(data.sentDate).to.be(new Date());
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sendMessageUsingPOST', function() {
        it('should call sendMessageUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for sendMessageUsingPOST call and complete the assertions
          /*
          var channelId = "channelId_example";
          var guildId = "guildId_example";
          var opts = {};
          opts.message = new CloneCordApi.FormMessage();
          opts.message.message = "";

          instance.sendMessageUsingPOST(channelId, guildId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloneCordApi.Message);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");
            {
              let dataCtr = data.reactionList;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(CloneCordApi.Reaction);
                expect(data.authorUuid).to.be.a('string');
                expect(data.authorUuid).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.emoteId).to.be.a('number');
                expect(data.emoteId).to.be("0");
              }
            }
            expect(data.senderId).to.be.a('string');
            expect(data.senderId).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.sentDate).to.be.a(Date);
            expect(data.sentDate).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
