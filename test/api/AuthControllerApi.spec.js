/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloneCordApi);
  }
}(this, function(expect, CloneCordApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloneCordApi.AuthControllerApi();
  });

  describe('(package)', function() {
    describe('AuthControllerApi', function() {
      describe('loginUsingPOST', function() {
        it('should call loginUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for loginUsingPOST call
          /*
          var user = "user_example";

          instance.loginUsingPOST(user, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('signUpUsingPOST', function() {
        it('should call signUpUsingPOST successfully', function(done) {
          // TODO: uncomment, update parameter values for signUpUsingPOST call and complete the assertions
          /*
          var authData = new CloneCordApi.RegistrationUser();
          authData.email = "";
          authData.password = "";
          authData.username = "";

          instance.signUpUsingPOST(authData, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(CloneCordApi.User);
            expect(data.avatar).to.be.a('string');
            expect(data.avatar).to.be("");
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("""00000000-0000-0000-0000-000000000000");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
