/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FormGuild', 'model/Guild'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FormGuild'), require('../model/Guild'));
  } else {
    // Browser globals (root is window)
    if (!root.CloneCordApi) {
      root.CloneCordApi = {};
    }
    root.CloneCordApi.GuildsApi = factory(root.CloneCordApi.ApiClient, root.CloneCordApi.FormGuild, root.CloneCordApi.Guild);
  }
}(this, function(ApiClient, FormGuild, Guild) {
  'use strict';

  /**
   * Guilds service.
   * @module api/GuildsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GuildsApi. 
   * @alias module:api/GuildsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createGuildUsingPOST operation.
     * @callback module:api/GuildsApi~createGuildUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Guild
     * @param {module:model/FormGuild} guild guild
     * @param {module:api/GuildsApi~createGuildUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    this.createGuildUsingPOST = function(guild, callback) {
      var postBody = guild;

      // verify the required parameter 'guild' is set
      if (guild === undefined || guild === null) {
        throw new Error("Missing the required parameter 'guild' when calling createGuildUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Guild;

      return this.apiClient.callApi(
        '/guilds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGuildUsingDELETE operation.
     * @callback module:api/GuildsApi~deleteGuildUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an owned Guild
     * @param {String} guildId ID of the specified Guild
     * @param {module:api/GuildsApi~deleteGuildUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteGuildUsingDELETE = function(guildId, callback) {
      var postBody = null;

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling deleteGuildUsingDELETE");
      }


      var pathParams = {
        'guildId': guildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/guilds/{guildId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuildInfoUsingGET operation.
     * @callback module:api/GuildsApi~getGuildInfoUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets info of a specific Guild
     * @param {String} guildId ID of the specified Guild
     * @param {module:api/GuildsApi~getGuildInfoUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    this.getGuildInfoUsingGET = function(guildId, callback) {
      var postBody = null;

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling getGuildInfoUsingGET");
      }


      var pathParams = {
        'guildId': guildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = Guild;

      return this.apiClient.callApi(
        '/guilds/{guildId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGuildUsingPUT operation.
     * @callback module:api/GuildsApi~updateGuildUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an owned Guild
     * @param {String} guildId ID of the specified Guild
     * @param {Object} opts Optional parameters
     * @param {module:model/FormGuild} opts.newGuild New guild data
     * @param {module:api/GuildsApi~updateGuildUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    this.updateGuildUsingPUT = function(guildId, opts, callback) {
      opts = opts || {};
      var postBody = opts['newGuild'];

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling updateGuildUsingPUT");
      }


      var pathParams = {
        'guildId': guildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Guild;

      return this.apiClient.callApi(
        '/guilds/{guildId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
