/**
 * CloneCord API
 * REST API to use CloneCord
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FormGuild from '../model/FormGuild';
import Guild from '../model/Guild';

/**
* Guilds service.
* @module api/GuildsApi
* @version 1.0.1
*/
export default class GuildsApi {

    /**
    * Constructs a new GuildsApi. 
    * @alias module:api/GuildsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createGuildUsingPOST operation.
     * @callback module:api/GuildsApi~createGuildUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Guild
     * @param {module:model/FormGuild} guild guild
     * @param {module:api/GuildsApi~createGuildUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    createGuildUsingPOST(guild, callback) {
      let postBody = guild;
      // verify the required parameter 'guild' is set
      if (guild === undefined || guild === null) {
        throw new Error("Missing the required parameter 'guild' when calling createGuildUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Guild;
      return this.apiClient.callApi(
        '/guilds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGuildUsingDELETE operation.
     * @callback module:api/GuildsApi~deleteGuildUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an owned Guild
     * @param {String} guildId ID of the specified Guild
     * @param {module:api/GuildsApi~deleteGuildUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGuildUsingDELETE(guildId, callback) {
      let postBody = null;
      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling deleteGuildUsingDELETE");
      }

      let pathParams = {
        'guildId': guildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/guilds/{guildId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGuildInfoUsingGET operation.
     * @callback module:api/GuildsApi~getGuildInfoUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets info of a specific Guild
     * @param {String} guildId ID of the specified Guild
     * @param {module:api/GuildsApi~getGuildInfoUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    getGuildInfoUsingGET(guildId, callback) {
      let postBody = null;
      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling getGuildInfoUsingGET");
      }

      let pathParams = {
        'guildId': guildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Guild;
      return this.apiClient.callApi(
        '/guilds/{guildId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGuildUsingPUT operation.
     * @callback module:api/GuildsApi~updateGuildUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Guild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an owned Guild
     * @param {String} guildId ID of the specified Guild
     * @param {Object} opts Optional parameters
     * @param {module:model/FormGuild} opts.newGuild New guild data
     * @param {module:api/GuildsApi~updateGuildUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Guild}
     */
    updateGuildUsingPUT(guildId, opts, callback) {
      opts = opts || {};
      let postBody = opts['newGuild'];
      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling updateGuildUsingPUT");
      }

      let pathParams = {
        'guildId': guildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Guild;
      return this.apiClient.callApi(
        '/guilds/{guildId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
