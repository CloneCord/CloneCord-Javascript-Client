/**
 * CloneCord API
 * REST API to use CloneCord
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* MemberRoles service.
* @module api/MemberRolesApi
* @version 1.0.7
*/
export default class MemberRolesApi {

    /**
    * Constructs a new MemberRolesApi. 
    * @alias module:api/MemberRolesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRole operation.
     * @callback module:api/MemberRolesApi~addRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} guildId 
     * @param {String} memberId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/MemberRolesApi~addRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRole(guildId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling addRole");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling addRole");
      }

      let pathParams = {
        'guildId': guildId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user-auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/guilds/{guildId}/members/{memberId}/roles', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRole operation.
     * @callback module:api/MemberRolesApi~removeRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} guildId 
     * @param {String} memberId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @param {module:api/MemberRolesApi~removeRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRole(guildId, memberId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling removeRole");
      }
      // verify the required parameter 'memberId' is set
      if (memberId === undefined || memberId === null) {
        throw new Error("Missing the required parameter 'memberId' when calling removeRole");
      }

      let pathParams = {
        'guildId': guildId,
        'memberId': memberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user-auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/guilds/{guildId}/members/{memberId}/roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
