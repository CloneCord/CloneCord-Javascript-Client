/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Guild', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Guild'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.CloneCordApi) {
      root.CloneCordApi = {};
    }
    root.CloneCordApi.UsersControllerApi = factory(root.CloneCordApi.ApiClient, root.CloneCordApi.Guild, root.CloneCordApi.User);
  }
}(this, function(ApiClient, Guild, User) {
  'use strict';

  /**
   * UsersController service.
   * @module api/UsersControllerApi
   * @version 1.0
   */

  /**
   * Constructs a new UsersControllerApi. 
   * @alias module:api/UsersControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSelfGuildsUsingGET operation.
     * @callback module:api/UsersControllerApi~getSelfGuildsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Guild>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSelfGuilds
     * @param {module:api/UsersControllerApi~getSelfGuildsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Guild>}
     */
    this.getSelfGuildsUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [Guild];

      return this.apiClient.callApi(
        '/users/@self/guilds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSelfUsingGET operation.
     * @callback module:api/UsersControllerApi~getSelfUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSelf
     * @param {module:api/UsersControllerApi~getSelfUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getSelfUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/@self', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUsingGET operation.
     * @callback module:api/UsersControllerApi~getUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUser
     * @param {String} userId userId
     * @param {module:api/UsersControllerApi~getUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUserUsingGET = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserUsingGET");
      }


      var pathParams = {
        'userId': userId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putSelfUsingPUT operation.
     * @callback module:api/UsersControllerApi~putSelfUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * putSelf
     * @param {module:model/User} user user
     * @param {module:api/UsersControllerApi~putSelfUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.putSelfUsingPUT = function(user, callback) {
      var postBody = user;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling putSelfUsingPUT");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/@self', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
