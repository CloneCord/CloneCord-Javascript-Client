/**
 * CloneCord API
 * REST API to use CloneCord
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FormLogin from '../model/FormLogin';
import RegistrationUser from '../model/RegistrationUser';
import User from '../model/User';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0.1
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the loginUsingPOST operation.
     * @callback module:api/AuthenticationApi~loginUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in
     * @param {module:model/FormLogin} loginData loginData
     * @param {module:api/AuthenticationApi~loginUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginUsingPOST(loginData, callback) {
      let postBody = loginData;
      // verify the required parameter 'loginData' is set
      if (loginData === undefined || loginData === null) {
        throw new Error("Missing the required parameter 'loginData' when calling loginUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signUpUsingPOST operation.
     * @callback module:api/AuthenticationApi~signUpUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account
     * @param {module:model/RegistrationUser} registrationData registrationData
     * @param {module:api/AuthenticationApi~signUpUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    signUpUsingPOST(registrationData, callback) {
      let postBody = registrationData;
      // verify the required parameter 'registrationData' is set
      if (registrationData === undefined || registrationData === null) {
        throw new Error("Missing the required parameter 'registrationData' when calling signUpUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = User;
      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
