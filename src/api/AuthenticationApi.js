/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FormLogin', 'model/RegistrationUser', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FormLogin'), require('../model/RegistrationUser'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.CloneCordApi) {
      root.CloneCordApi = {};
    }
    root.CloneCordApi.AuthenticationApi = factory(root.CloneCordApi.ApiClient, root.CloneCordApi.FormLogin, root.CloneCordApi.RegistrationUser, root.CloneCordApi.User);
  }
}(this, function(ApiClient, FormLogin, RegistrationUser, User) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 1.0.1
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the loginUsingPOST operation.
     * @callback module:api/AuthenticationApi~loginUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Log in
     * @param {Object} opts Optional parameters
     * @param {module:model/FormLogin} opts.user Login data
     * @param {module:api/AuthenticationApi~loginUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.loginUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['user'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/auth/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signUpUsingPOST operation.
     * @callback module:api/AuthenticationApi~signUpUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account
     * @param {Object} opts Optional parameters
     * @param {module:model/RegistrationUser} opts.registrationData authData
     * @param {module:api/AuthenticationApi~signUpUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.signUpUsingPOST = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['registrationData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
