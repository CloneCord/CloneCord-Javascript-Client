/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FormMessage', 'model/Message'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FormMessage'), require('../model/Message'));
  } else {
    // Browser globals (root is window)
    if (!root.CloneCordApi) {
      root.CloneCordApi = {};
    }
    root.CloneCordApi.MessagesApi = factory(root.CloneCordApi.ApiClient, root.CloneCordApi.FormMessage, root.CloneCordApi.Message);
  }
}(this, function(ApiClient, FormMessage, Message) {
  'use strict';

  /**
   * Messages service.
   * @module api/MessagesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MessagesApi. 
   * @alias module:api/MessagesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteMessageUsingDELETE operation.
     * @callback module:api/MessagesApi~deleteMessageUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified message in specified Channel if current User has permissions
     * @param {String} channelId ID of the specified Channel
     * @param {String} guildId ID of the specified Guild
     * @param {String} messageId ID of the specified Message
     * @param {module:api/MessagesApi~deleteMessageUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteMessageUsingDELETE = function(channelId, guildId, messageId, callback) {
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteMessageUsingDELETE");
      }

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling deleteMessageUsingDELETE");
      }

      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteMessageUsingDELETE");
      }


      var pathParams = {
        'channelId': channelId,
        'guildId': guildId,
        'messageId': messageId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/guilds/{guildId}/{channelId}/messages/{messageId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessagesUsingGET operation.
     * @callback module:api/MessagesApi~getMessagesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Message>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of messages in specified Channel if current User has permissions
     * @param {String} channelId ID of the specified Channel
     * @param {String} guildId ID of the specified Guild
     * @param {Object} opts Optional parameters
     * @param {Number} opts.after Return only mesages after this timestamp
     * @param {Number} opts.before Return only messages sent before this timestamp
     * @param {Number} opts.limit Maximum number of messages to return (max = 100) (default to 100)
     * @param {module:api/MessagesApi~getMessagesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Message>}
     */
    this.getMessagesUsingGET = function(channelId, guildId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling getMessagesUsingGET");
      }

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling getMessagesUsingGET");
      }


      var pathParams = {
        'channelId': channelId,
        'guildId': guildId
      };
      var queryParams = {
        'after': opts['after'],
        'before': opts['before'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = [Message];

      return this.apiClient.callApi(
        '/guilds/{guildId}/{channelId}/messages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessageUsingPOST operation.
     * @callback module:api/MessagesApi~sendMessageUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Message} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a new message to specified Channel if current User has permissions
     * @param {String} channelId ID of the specified Channel
     * @param {String} guildId ID of the specified Guild
     * @param {Object} opts Optional parameters
     * @param {module:model/FormMessage} opts.message Message data
     * @param {module:api/MessagesApi~sendMessageUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Message}
     */
    this.sendMessageUsingPOST = function(channelId, guildId, opts, callback) {
      opts = opts || {};
      var postBody = opts['message'];

      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling sendMessageUsingPOST");
      }

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling sendMessageUsingPOST");
      }


      var pathParams = {
        'channelId': channelId,
        'guildId': guildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Message;

      return this.apiClient.callApi(
        '/guilds/{guildId}/{channelId}/messages', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
