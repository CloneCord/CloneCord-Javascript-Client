/*
 * CloneCord API
 * REST API to use CloneCord
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Channel', 'model/FormChannel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Channel'), require('../model/FormChannel'));
  } else {
    // Browser globals (root is window)
    if (!root.CloneCordApi) {
      root.CloneCordApi = {};
    }
    root.CloneCordApi.ChannelsApi = factory(root.CloneCordApi.ApiClient, root.CloneCordApi.Channel, root.CloneCordApi.FormChannel);
  }
}(this, function(ApiClient, Channel, FormChannel) {
  'use strict';

  /**
   * Channels service.
   * @module api/ChannelsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ChannelsApi. 
   * @alias module:api/ChannelsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createChannelUsingPOST operation.
     * @callback module:api/ChannelsApi~createChannelUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Channel in specified Guild
     * @param {String} guildId ID of the specified Guild
     * @param {Object} opts Optional parameters
     * @param {module:model/FormChannel} opts.channel Channel data
     * @param {module:api/ChannelsApi~createChannelUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    this.createChannelUsingPOST = function(guildId, opts, callback) {
      opts = opts || {};
      var postBody = opts['channel'];

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling createChannelUsingPOST");
      }


      var pathParams = {
        'guildId': guildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Channel;

      return this.apiClient.callApi(
        '/guilds/{guildId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelUsingDELETE operation.
     * @callback module:api/ChannelsApi~deleteChannelUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified Channel if current User has permissions
     * @param {String} channelId ID of the specified Channel
     * @param {String} guildId ID of the specified Guild
     * @param {module:api/ChannelsApi~deleteChannelUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteChannelUsingDELETE = function(channelId, guildId, callback) {
      var postBody = null;

      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling deleteChannelUsingDELETE");
      }

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling deleteChannelUsingDELETE");
      }


      var pathParams = {
        'channelId': channelId,
        'guildId': guildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = [];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/guilds/{guildId}/{channelId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelUsingPUT operation.
     * @callback module:api/ChannelsApi~updateChannelUsingPUTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Channel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specified Channel if current User has permissions
     * @param {String} channelId ID of the specified Channel
     * @param {String} guildId ID of the specified Guild
     * @param {Object} opts Optional parameters
     * @param {module:model/FormChannel} opts.channel New channel data
     * @param {module:api/ChannelsApi~updateChannelUsingPUTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Channel}
     */
    this.updateChannelUsingPUT = function(channelId, guildId, opts, callback) {
      opts = opts || {};
      var postBody = opts['channel'];

      // verify the required parameter 'channelId' is set
      if (channelId === undefined || channelId === null) {
        throw new Error("Missing the required parameter 'channelId' when calling updateChannelUsingPUT");
      }

      // verify the required parameter 'guildId' is set
      if (guildId === undefined || guildId === null) {
        throw new Error("Missing the required parameter 'guildId' when calling updateChannelUsingPUT");
      }


      var pathParams = {
        'channelId': channelId,
        'guildId': guildId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Channel;

      return this.apiClient.callApi(
        '/guilds/{guildId}/{channelId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
